//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace qlCaPhe.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class qlCaPheEntities : DbContext
    {
        public qlCaPheEntities()
            : base("name=qlCaPheEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<baiViet> baiViets { get; set; }
        public virtual DbSet<BanChoNgoi> BanChoNgois { get; set; }
        public virtual DbSet<BangGiaoViec> BangGiaoViecs { get; set; }
        public virtual DbSet<caLamViec> caLamViecs { get; set; }
        public virtual DbSet<cauHinh> cauHinhs { get; set; }
        public virtual DbSet<congThucPhaChe> congThucPhaChes { get; set; }
        public virtual DbSet<ctBangGiaoViec> ctBangGiaoViecs { get; set; }
        public virtual DbSet<ctCongThuc> ctCongThucs { get; set; }
        public virtual DbSet<ctCungCap> ctCungCaps { get; set; }
        public virtual DbSet<ctDanhGia> ctDanhGias { get; set; }
        public virtual DbSet<ctDatBan> ctDatBans { get; set; }
        public virtual DbSet<ctHoaDonOrder> ctHoaDonOrders { get; set; }
        public virtual DbSet<ctHoaDonTam> ctHoaDonTams { get; set; }
        public virtual DbSet<ctPhieuNhapKho> ctPhieuNhapKhoes { get; set; }
        public virtual DbSet<ctPhieuXuatKho> ctPhieuXuatKhoes { get; set; }
        public virtual DbSet<ctTonKho> ctTonKhoes { get; set; }
        public virtual DbSet<danhGiaNhanVien> danhGiaNhanViens { get; set; }
        public virtual DbSet<datBanOnline> datBanOnlines { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<hoaDonOrder> hoaDonOrders { get; set; }
        public virtual DbSet<hoaDonTam> hoaDonTams { get; set; }
        public virtual DbSet<khoHang> khoHangs { get; set; }
        public virtual DbSet<khuVuc> khuVucs { get; set; }
        public virtual DbSet<lichSuGia> lichSuGias { get; set; }
        public virtual DbSet<loaiNguyenLieu> loaiNguyenLieux { get; set; }
        public virtual DbSet<loaiSanPham> loaiSanPhams { get; set; }
        public virtual DbSet<mucTieuDanhGia> mucTieuDanhGias { get; set; }
        public virtual DbSet<nguyenLieu> nguyenLieux { get; set; }
        public virtual DbSet<nhaCungCap> nhaCungCaps { get; set; }
        public virtual DbSet<nhatKy> nhatKies { get; set; }
        public virtual DbSet<nhomTaiKhoan> nhomTaiKhoans { get; set; }
        public virtual DbSet<phieuNhapKho> phieuNhapKhoes { get; set; }
        public virtual DbSet<phieuXuatKho> phieuXuatKhoes { get; set; }
        public virtual DbSet<sanPham> sanPhams { get; set; }
        public virtual DbSet<slide> slides { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<taiKhoan> taiKhoans { get; set; }
        public virtual DbSet<thanhVien> thanhViens { get; set; }
        public virtual DbSet<thongBao> thongBaos { get; set; }
        public virtual DbSet<TonKho> TonKhoes { get; set; }
    
        public virtual int getNextIdentify(string tenTable)
        {
            var tenTableParameter = tenTable != null ?
                new ObjectParameter("tenTable", tenTable) :
                new ObjectParameter("tenTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getNextIdentify", tenTableParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_demoSoluong(Nullable<System.DateTime> ngayXuat)
        {
            var ngayXuatParameter = ngayXuat.HasValue ?
                new ObjectParameter("ngayXuat", ngayXuat) :
                new ObjectParameter("ngayXuat", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_demoSoluong", ngayXuatParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_getListNhapKho(Nullable<System.DateTime> ngayXuat, Nullable<System.DateTime> ngayNhap)
        {
            var ngayXuatParameter = ngayXuat.HasValue ?
                new ObjectParameter("ngayXuat", ngayXuat) :
                new ObjectParameter("ngayXuat", typeof(System.DateTime));
    
            var ngayNhapParameter = ngayNhap.HasValue ?
                new ObjectParameter("ngayNhap", ngayNhap) :
                new ObjectParameter("ngayNhap", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getListNhapKho", ngayXuatParameter, ngayNhapParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
